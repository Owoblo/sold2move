// Quick Authentication Test Script
// Run this in the browser console to test authentication

console.log('üîê Starting Quick Authentication Test...');

// Test 1: Check if Supabase is available
console.log('\n1Ô∏è‚É£ Testing Supabase availability...');
if (typeof window.supabase !== 'undefined') {
    console.log('‚úÖ Supabase client found');
} else {
    console.log('‚ùå Supabase client not found. Make sure you are on a page with Supabase initialized.');
    console.log('   Try running this on the login or signup page.');
}

// Test 2: Check authentication components
console.log('\n2Ô∏è‚É£ Testing authentication components...');
const loginForm = document.querySelector('form');
const signupForm = document.querySelector('form');
const googleButton = document.querySelector('[data-provider="google"]') || document.querySelector('button[class*="google"]');

if (loginForm || signupForm) {
    console.log('‚úÖ Authentication forms found');
    
    // Check form fields
    const emailInput = document.querySelector('input[type="email"]');
    const passwordInput = document.querySelector('input[type="password"]');
    
    if (emailInput && passwordInput) {
        console.log('‚úÖ Email and password inputs found');
    } else {
        console.log('‚ö†Ô∏è Email or password inputs missing');
    }
} else {
    console.log('‚ùå No authentication forms found');
}

if (googleButton) {
    console.log('‚úÖ Google OAuth button found');
} else {
    console.log('‚ö†Ô∏è Google OAuth button not found');
}

// Test 3: Check for error handling components
console.log('\n3Ô∏è‚É£ Testing error handling...');
const errorDisplay = document.querySelector('[class*="error"]') || document.querySelector('[class*="Error"]');
if (errorDisplay) {
    console.log('‚úÖ Error display components found');
} else {
    console.log('‚ÑπÔ∏è No error display components visible (this is normal if no errors)');
}

// Test 4: Check for loading states
console.log('\n4Ô∏è‚É£ Testing loading states...');
const loadingButton = document.querySelector('button[disabled]') || document.querySelector('[class*="loading"]');
if (loadingButton) {
    console.log('‚úÖ Loading states found');
} else {
    console.log('‚ÑπÔ∏è No loading states visible (this is normal if not loading)');
}

// Test 5: Check URL parameters for auth errors
console.log('\n5Ô∏è‚É£ Testing URL error parameters...');
const urlParams = new URLSearchParams(window.location.search);
const error = urlParams.get('error');
const errorDescription = urlParams.get('error_description');

if (error) {
    console.log(`‚ö†Ô∏è Auth error in URL: ${error}`);
    if (errorDescription) {
        console.log(`   Description: ${errorDescription}`);
    }
} else {
    console.log('‚úÖ No auth errors in URL');
}

// Test 6: Check for auth callback handling
console.log('\n6Ô∏è‚É£ Testing auth callback...');
if (window.location.pathname.includes('/auth/callback')) {
    console.log('‚úÖ On auth callback page');
    
    const code = urlParams.get('code');
    if (code) {
        console.log('‚úÖ OAuth code found in URL');
    } else {
        console.log('‚ö†Ô∏è No OAuth code in URL');
    }
} else {
    console.log('‚ÑπÔ∏è Not on auth callback page');
}

// Test 7: Check session state
console.log('\n7Ô∏è‚É£ Testing session state...');
if (typeof window.supabase !== 'undefined') {
    window.supabase.auth.getUser().then(({ data, error }) => {
        if (error && error.message !== 'Auth session missing!') {
            console.log(`‚ùå Session error: ${error.message}`);
        } else if (data.user) {
            console.log(`‚úÖ Active session for: ${data.user.email}`);
        } else {
            console.log('‚ÑπÔ∏è No active session (user not logged in)');
        }
    }).catch(err => {
        console.log(`‚ùå Session check failed: ${err.message}`);
    });
} else {
    console.log('‚ö†Ô∏è Cannot check session - Supabase not available');
}

// Test 8: Check for validation
console.log('\n8Ô∏è‚É£ Testing form validation...');
if (loginForm || signupForm) {
    const form = loginForm || signupForm;
    const emailInput = form.querySelector('input[type="email"]');
    const passwordInput = form.querySelector('input[type="password"]');
    
    if (emailInput && passwordInput) {
        // Test invalid email
        emailInput.value = 'invalid-email';
        emailInput.dispatchEvent(new Event('input', { bubbles: true }));
        
        setTimeout(() => {
            const emailError = form.querySelector('[class*="error"]') || form.querySelector('.text-red-500');
            if (emailError) {
                console.log('‚úÖ Email validation working');
            } else {
                console.log('‚ö†Ô∏è Email validation not visible');
            }
            
            // Reset
            emailInput.value = '';
        }, 100);
    }
}

// Test 9: Check for toast notifications
console.log('\n9Ô∏è‚É£ Testing toast notifications...');
const toastContainer = document.querySelector('[class*="toast"]') || document.querySelector('[data-sonner-toaster]');
if (toastContainer) {
    console.log('‚úÖ Toast notification system found');
} else {
    console.log('‚ÑπÔ∏è Toast notification system not visible (this is normal if no toasts)');
}

// Test 10: Check for navigation
console.log('\nüîü Testing navigation...');
const signupLink = document.querySelector('a[href*="signup"]') || document.querySelector('a[href*="register"]');
const loginLink = document.querySelector('a[href*="login"]') || document.querySelector('a[href*="signin"]');

if (signupLink) {
    console.log('‚úÖ Signup link found');
} else {
    console.log('‚ÑπÔ∏è Signup link not found');
}

if (loginLink) {
    console.log('‚úÖ Login link found');
} else {
    console.log('‚ÑπÔ∏è Login link not found');
}

console.log('\nüéâ Quick authentication test completed!');
console.log('\nüìã Summary:');
console.log('- Check the results above for any ‚ùå errors');
console.log('- If you see ‚úÖ for most items, authentication is working');
console.log('- For detailed testing, use the browser-auth-test.html file');
console.log('- For manual testing, follow the manual-auth-test.md guide');

// Helper function to test actual authentication
window.testAuth = async function(email = 'test@example.com', password = 'TestPassword123!') {
    if (typeof window.supabase === 'undefined') {
        console.log('‚ùå Supabase not available for testing');
        return;
    }
    
    console.log('üß™ Testing actual authentication...');
    
    try {
        // Test signup
        console.log('Testing signup...');
        const { data: signupData, error: signupError } = await window.supabase.auth.signUp({
            email: email.replace('@', `+${Date.now()}@`), // Make unique
            password: password,
        });
        
        if (signupError) {
            console.log(`‚ùå Signup failed: ${signupError.message}`);
        } else {
            console.log('‚úÖ Signup successful');
        }
        
        // Test signin
        console.log('Testing signin...');
        const { data: signinData, error: signinError } = await window.supabase.auth.signInWithPassword({
            email: email,
            password: password,
        });
        
        if (signinError) {
            console.log(`‚ùå Signin failed: ${signinError.message}`);
        } else {
            console.log('‚úÖ Signin successful');
        }
        
    } catch (error) {
        console.log(`‚ùå Auth test error: ${error.message}`);
    }
};

console.log('\nüí° To test actual authentication, run: testAuth("your-email@example.com", "your-password")');
